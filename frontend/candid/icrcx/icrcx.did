type WithdrawResult = variant {
  Err : variant {
    AmountBelowMinimum : record {};
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    InsufficientCredit : record {};
  };
  Ok : record {
    amount : nat;
    txid : nat;
  };
};
type Withdraw = variant {
  BadBurn : record { min_burn_amount : nat };
  BadFee : record { expected_fee : nat };
  CallIcrc1LedgerError;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  GenericError : record {
    error_code : nat;
    message : text;
  };
  InsufficientCredit;
  InsufficientFunds : record { balance : nat };
  TemporarilyUnavailable;
  TooLowQuantity;
  TooOld;
};
type UserOrder = record {
  price : float64;
  user : principal;
  volume : nat;
};
type UpperResult_4 = variant {
  Err : CancelOrderError;
  Ok : CancellationResult;
};
type UpperResult_3 = variant {
  Err : ManageOrdersError;
  Ok : record {
    vec CancellationResult;
    vec OrderId;
  };
};
type UpperResult_2 = variant {
  Err : PlaceOrderError;
  Ok : OrderId;
};
type UpperResult_1 = variant {
  Err : RegisterAssetError;
  Ok : nat;
};
type UpperResult = variant {
  Err : ReplaceOrderError;
  Ok : OrderId;
};
type TransferMin = variant {
  BadBurn : record { min_burn_amount : nat };
  BadFee : record { expected_fee : nat };
  CallIcrc1LedgerError;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  GenericError : record {
    error_code : nat;
    message : text;
  };
  InsufficientFunds : record { balance : nat };
  TemporarilyUnavailable;
  TooLowQuantity;
  TooOld;
};
type TransactionHistoryItem = record {
  nat64;
  nat;
  variant {
    ask;
    bid;
  };
  principal;
  nat;
  float64;
};
type TokenInfo = record {
  allowance_fee : nat;
  deposit_fee : nat;
  withdrawal_fee : nat;
};
type Subaccount = blob;
type ReplaceOrderError = variant {
  ConflictingOrder : record {
    variant {
      ask;
      bid;
    };
    opt OrderId__1;
  };
  NoCredit;
  PriceDigitsOverflow : record { maxDigits : nat };
  SessionNumberMismatch : principal;
  TooLowOrder;
  UnknownAsset;
  UnknownOrder;
  UnknownPrincipal;
  VolumeStepViolated : record { baseVolumeStep : nat };
};
type RegisterAssetError = variant { AlreadyRegistered };
type PriceHistoryItem = record {
  nat64;
  nat;
  principal;
  nat;
  float64;
};
type PlaceOrderError = variant {
  ConflictingOrder : record {
    variant {
      ask;
      bid;
    };
    opt OrderId__1;
  };
  NoCredit;
  PriceDigitsOverflow : record { maxDigits : nat };
  SessionNumberMismatch : principal;
  TooLowOrder;
  UnknownAsset;
  UnknownPrincipal;
  VolumeStepViolated : record { baseVolumeStep : nat };
};
type OrderId__1 = nat;
type OrderId = nat;
type Order = record {
  icrc1Ledger : principal;
  price : float64;
  volume : nat;
};
type NotifyResult = variant {
  Err : variant {
    CallLedgerError : record { message : text };
    NotAvailable : record { message : text };
  };
  Ok : record {
    credit : int;
    credit_inc : nat;
    deposit_inc : nat;
  };
};
type ManageOrdersError = variant {
  SessionNumberMismatch : principal;
  UnknownPrincipal;
  cancellation : record {
    error : variant {
      UnknownAsset;
      UnknownOrder;
    };
    index : nat;
  };
  placement : record {
    error : InternalPlaceOrderError;
    index : nat;
  };
};
type LogEvent = variant {
  allowanceDrawn : record { amount : nat };
  allowanceError : DepositFromAllowance;
  burned : nat;
  consolidated : record {
    credited : nat;
    deducted : nat;
  };
  consolidationError : TransferMin;
  credited : nat;
  debited : nat;
  error : text;
  feeUpdated : record {
    new : nat;
    old : nat;
  };
  issued : int;
  newDeposit : nat;
  surchargeUpdated : record {
    new : nat;
    old : nat;
  };
  withdraw : record {
    amount : nat;
    to : Account;
  };
  withdrawalError : Withdraw;
};
type InternalPlaceOrderError = variant {
  ConflictingOrder : record {
    variant {
      ask;
      bid;
    };
    opt OrderId__1;
  };
  NoCredit;
  PriceDigitsOverflow : record { maxDigits : nat };
  TooLowOrder;
  UnknownAsset;
  VolumeStepViolated : record { baseVolumeStep : nat };
};
type IndicativeStats = record {
  clearing : variant {
    match : record {
      price : float64;
      volume : nat;
    };
    noMatch : record {
      maxBidPrice : opt float64;
      minAskPrice : opt float64;
    };
  };
  totalAskVolume : nat;
  totalBidVolume : nat;
};
type HttpResponse = record {
  body : blob;
  headers : vec record {
    text;
    text;
  };
  status_code : nat16;
};
type HttpRequest = record {
  body : blob;
  headers : vec record {
    text;
    text;
  };
  method : text;
  url : text;
};
type DepositResult = variant {
  Err : variant {
    AmountBelowMinimum : record {};
    BadFee : record { expected_fee : nat };
    CallLedgerError : record { message : text };
    TransferError : record { message : text };
  };
  Ok : record {
    credit : int;
    credit_inc : nat;
    txid : nat;
  };
};
type DepositHistoryItem = record {
  nat64;
  variant {
    deposit;
    withdrawal;
    withdrawalRollback;
  };
  principal;
  nat;
};
type DepositFromAllowance = variant {
  BadBurn : record { min_burn_amount : nat };
  BadFee : record { expected_fee : nat };
  CallIcrc1LedgerError;
  CreatedInFuture : record { ledger_time : nat64 };
  Duplicate : record { duplicate_of : nat };
  GenericError : record {
    error_code : nat;
    message : text;
  };
  InsufficientAllowance : record { allowance : nat };
  InsufficientFunds : record { balance : nat };
  TemporarilyUnavailable;
};
type CreditInfo = record {
  available : nat;
  locked : nat;
  total : nat;
};
type CancellationResult = record {
  OrderId__1;
  principal;
  nat;
  float64;
};
type CancelOrderError = variant {
  SessionNumberMismatch : principal;
  UnknownOrder;
  UnknownPrincipal;
};
type Account = record {
  owner : principal;
  subaccount : opt Subaccount;
};
service : {
  addAdmin : (principal) -> ();
  cancelAsks : (vec OrderId, opt nat) -> (vec UpperResult_4);
  cancelBids : (vec OrderId, opt nat) -> (vec UpperResult_4);
  getQuoteLedger : () -> (principal) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  icrc84_deposit : (
    record {
      amount : nat;
      expected_fee : opt nat;
      from : record {
        owner : principal;
        subaccount : opt blob;
      };
      token : principal;
    }
  ) -> (DepositResult);
  icrc84_notify : (record { token : principal }) -> (NotifyResult);
  icrc84_query : (vec principal) -> (
    vec record {
      principal;
      record {
        credit : int;
        tracked_deposit : opt nat;
      };
    }
  ) query;
  icrc84_supported_tokens : () -> (vec principal) query;
  icrc84_token_info : (principal) -> (TokenInfo) query;
  icrc84_withdraw : (
    record {
      amount : nat;
      expected_fee : opt nat;
      to : record {
        owner : principal;
        subaccount : opt blob;
      };
      token : principal;
    }
  ) -> (WithdrawResult);
  indicativeStats : (principal) -> (IndicativeStats) query;
  isTokenHandlerFrozen : (principal) -> (bool) query;
  listAdmins : () -> (vec principal) query;
  manageOrders : (
    opt variant {
      all : opt vec principal;
      orders : vec variant {
        ask : OrderId;
        bid : OrderId;
      };
    },
    vec variant {
      ask : record {
        principal;
        nat;
        float64;
      };
      bid : record {
        principal;
        nat;
        float64;
      };
    },
    opt nat,
  ) -> (UpperResult_3);
  nextSession : () -> (
    record {
      counter : nat;
      timestamp : nat;
    }
  ) query;
  placeAsks : (
    vec record {
      principal;
      nat;
      float64;
    },
    opt nat,
  ) -> (vec UpperResult_2);
  placeBids : (
    vec record {
      principal;
      nat;
      float64;
    },
    opt nat,
  ) -> (vec UpperResult_2);
  principalToSubaccount : (principal) -> (opt blob) query;
  queryAsks : () -> (
    vec record {
      OrderId;
      Order;
      nat;
    }
  ) query;
  queryBids : () -> (
    vec record {
      OrderId;
      Order;
      nat;
    }
  ) query;
  queryCredit : (principal) -> (CreditInfo, nat) query;
  queryCredits : () -> (
    vec record {
      principal;
      CreditInfo;
      nat;
    }
  ) query;
  queryDepositHistory : (opt principal, nat, nat) -> (vec DepositHistoryItem) query;
  queryOrderBook : (principal) -> (
    record {
      asks : vec record {
        OrderId;
        UserOrder;
      };
      bids : vec record {
        OrderId;
        UserOrder;
      };
    }
  ) query;
  queryPoints : () -> (nat) query;
  queryPriceHistory : (opt principal, nat, nat, bool) -> (vec PriceHistoryItem) query;
  queryTokenAsks : (principal) -> (
    vec record {
      OrderId;
      Order;
    },
    nat,
  ) query;
  queryTokenBids : (principal) -> (
    vec record {
      OrderId;
      Order;
    },
    nat,
  ) query;
  queryTokenHandlerDepositRegistry : (principal) -> (
    nat,
    nat,
    nat,
    vec record {
      principal;
      record {
        lock : bool;
        value : nat;
      };
    },
  ) query;
  queryTokenHandlerJournal : (principal, nat, nat) -> (
    vec record {
      principal;
      LogEvent;
    }
  ) query;
  queryTokenHandlerNotificationLock : (principal, principal) -> (
    opt record {
      lock : bool;
      value : nat;
    }
  ) query;
  queryTokenHandlerNotificationsOnPause : (principal) -> (bool) query;
  queryTokenHandlerState : (principal) -> (
    record {
      balance : record {
        consolidated : nat;
        deposited : nat;
        queued : nat;
        underway : nat;
      };
      credit : record {
        pool : int;
        total : int;
      };
      flow : record {
        consolidated : nat;
        withdrawn : nat;
      };
      ledger : record { fee : nat };
      users : record { queued : nat };
    }
  ) query;
  queryTransactionHistory : (opt principal, nat, nat) -> (vec TransactionHistoryItem) query;
  queryTransactionHistoryForward : (opt principal, nat, nat) -> (vec TransactionHistoryItem, nat, bool) query;
  queryUserAsks : (principal) -> (
    vec record {
      OrderId;
      Order;
    }
  ) query;
  queryUserBids : (principal) -> (
    vec record {
      OrderId;
      Order;
    }
  ) query;
  queryUserCredits : (principal) -> (
    vec record {
      principal;
      CreditInfo;
    }
  ) query;
  queryUserCreditsInTokenHandler : (principal, principal) -> (int) query;
  queryUserDepositHistory : (principal, opt principal, nat, nat) -> (vec DepositHistoryItem) query;
  queryUserTransactionHistory : (principal, opt principal, nat, nat) -> (vec TransactionHistoryItem) query;
  registerAsset : (principal, nat) -> (UpperResult_1);
  removeAdmin : (principal) -> ();
  replaceAsk : (OrderId, nat, float64, opt nat) -> (UpperResult);
  replaceBid : (OrderId, nat, float64, opt nat) -> (UpperResult);
  setConsolidationTimerEnabled : (bool) -> ();
  settings : () -> (
    record {
      orderPriceDigitsLimit : nat;
      orderQuoteVolumeMinimum : nat;
      orderQuoteVolumeStep : nat;
    }
  ) query;
  totalPointsSupply : () -> (nat) query;
  updateTokenHandlerFee : (principal) -> (opt nat);
  wipeOrders : () -> ();
  wipePriceHistory : (principal) -> ();
  wipeUsers : () -> ();
};
