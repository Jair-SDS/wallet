type WithdrawResult = variant {
  Err : variant {
    AmountBelowMinimum : record {};
    CallLedgerError : record { message : text };
    InsufficientCredit : record {};
  };
  Ok : record {
    amount : nat;
    txid : nat;
  };
};
type TokenInfo = record {
  deposit_fee : nat;
  min_deposit : nat;
  min_withdrawal : nat;
  withdrawal_fee : nat;
};
type NotifyResult = variant {
  Err : variant {
    CallLedgerError : record { message : text };
    NotAvailable : record { message : text };
  };
  Ok : record {
    credit : int;
    credit_inc : nat;
    deposit_inc : nat;
  };
};
type DepositResponse = variant {
  Err : variant {
    AmountBelowMinimum : record {};
    CallLedgerError : record { message : text };
    TransferError : record { message : text };
  };
  Ok : record {
    credit : int;
    credit_inc : nat;
    txid : nat;
  };
};
type DepositArgs = record {
  amount : nat;
  from : Account;
  token : principal;
};
type Account = record {
  owner : principal;
  subaccount : opt blob;
};
service : {
  icrc84_all_credits : () -> (
    vec record {
      principal;
      int;
    }
  ) query;
  icrc84_credit : (principal) -> (int) query;
  icrc84_deposit : (DepositArgs) -> (DepositResponse);
  icrc84_notify : (record { token : principal }) -> (NotifyResult);
  icrc84_supported_tokens : () -> (vec principal) query;
  icrc84_token_info : (principal) -> (TokenInfo) query;
  icrc84_trackedDeposit : (principal) -> (
    variant {
      Err : variant { NotAvailable : record { message : text } };
      Ok : nat;
    }
  ) query;
  icrc84_withdraw : (
    record {
      amount : nat;
      to : Account;
      token : principal;
    }
  ) -> (WithdrawResult);
  init : () -> ();
  principalToSubaccount : (principal) -> (opt blob) query;
  registerAsset : (principal) -> (
    variant {
      Err : variant { AlreadyRegistered : nat };
      Ok : nat;
    }
  );
};
